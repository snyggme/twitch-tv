{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","App_AddStreamForm","onSubmit","Streams","arr","show","Object","toConsumableArray","streams","sort","b","type","filter","item","map","App_Stream","name","logo","title","onClick","game","viewers","key","id","Stream","concat","src","target","href","e","Button","newClass","active","text","toLowerCase","AddStreamForm","inputValue","preventDefault","document","getElementById","value","placeholder","onChange","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isLoaded","handleAllButton","bind","assertThisInitialized","handleOnlineButton","handleOfflineButton","handleButtonRemove","handleAddButton","_this2","allStreams","makeRequest","setState","user","_this3","fetch","method","mode","headers","Client-ID","then","res","json","result","streamObj","stream","channel","status","_id","getRandomLogo","Math","random","prevState","length","error","alert","_this4","some","hasOwnProperty","push","btnActivePosition","left","streamsContent","App_Streams","App_Header","style","App_Button","React","Component","userDefaultIcons","floor","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c61f212c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.scss'\n\nconst Header = (props) => {\n  return(\n    <header>\n      <h1><i className=\"fa fa-twitch\"/><span>Twitch Streamers</span></h1>\n      <AddStreamForm onSubmit={props.onSubmit}/>\n    </header>\n  )\n}\n\nconst Streams = (props) => {\n  let arr = props.show === 'all' \n                ? [...props.streams.sort((a, b) => a.type < b.type)] \n                : props.show === 'online' \n                  ? props.streams.filter(item => item.type === 'online')\n                  : props.streams.filter(item => item.type === 'offline')\n\n  return(\n    <div>\n    {arr.map(item => <Stream name={item.name}\n                             logo={item.logo}\n                             title={item.title}\n                             onClick={props.onClick}\n                             game={item.game}\n                             viewers={item.viewers}\n                             key={item.id}/>)}\n    </div>\n  )\n}\n\nconst Stream = (props) => {\n  const type = props.title === 'Offline' ? '' : 'stream-online'\n  return(\n    <div className={`stream-grid ${type}`}> \n      <div className='stream-logo'>\n        <img src={props.logo}/>\n      </div>\n      <div className='stream-name'>\n        <a target='_blank' href={`https://twitch.tv/${props.name}`}>{props.name}</a>\n      </div>\n      <div className='stream-title'>{props.title}</div>\n      <div id='delete-stream' \n           onClick={(e) => props.onClick(props.name)}>\n        <i className='fa fa-trash'/>\n      </div>\n      {type === '' ? '' : <div id='stream-viewers'>{props.game} <i className='fa fa-eye'/> {props.viewers}</div>}\n    </div>\n  )\n}\n\nconst Button = (props) => {\n  const newClass = props.active === props.text.toLowerCase() ? 'btn btn-text-white' : 'btn'\n  return(\n    <div className={newClass} onClick={props.onClick}>\n      {props.text}\n      <div>{props.show}</div>\n    </div>\n  )\n}\n\nconst AddStreamForm = (props) => {\n  let inputValue = ''\n  \n  const onSubmit = (e) => {\n    e.preventDefault()\n    document.getElementById('name').value = ''\n    \n    return props.onSubmit(inputValue)\n  }\n  \n  return(\n    <div className='form-add-stream'>\n      <form onSubmit={onSubmit}>\n        <input type=\"text\" id=\"name\" placeholder=\"Add stream\" \n               onChange={e => inputValue = e.target.value}/>\n       \n      </form>\n    </div>\n  )\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {   \n      show: 'all',\n      isLoaded: false,\n      streams: []\n    } \n    this.handleAllButton = this.handleAllButton.bind(this)\n    this.handleOnlineButton = this.handleOnlineButton.bind(this)\n    this.handleOfflineButton = this.handleOfflineButton.bind(this)\n    this.handleButtonRemove = this.handleButtonRemove.bind(this)\n    this.handleAddButton = this.handleAddButton.bind(this)\n  }\n  componentDidMount() {\n    allStreams.map(item => this.makeRequest(item))\n  }\n  handleAllButton(e) {\n    this.setState({\n      show: 'all'\n    })\n  }\n  handleOnlineButton(e) {\n    this.setState({\n      show: 'online'\n    })\n  }\n  handleOfflineButton(e) {\n    this.setState({\n      show: 'offline'\n    })\n  }\n  makeRequest(user) {\n    fetch(`https://api.twitch.tv/kraken/streams/${user}`, {\n      method: 'GET',\n      mode: 'cors',\n      headers: {\n        'Client-ID': 'rrpmmx09b1azju8jpwk6ugeei3uml9'\n      }\n    })\n      .then(res => res.json())\n        .then(\n          (result) => {\n            const streamObj = result.stream !== null ? {\n                name: user,\n                title: result.stream.channel.status,\n                type: 'online',\n                logo: result.stream.channel.logo,\n                viewers: result.stream.viewers,\n                id: result.stream._id,\n                game: result.stream.game\n              } : {\n                name: user,\n                title: 'Offline',\n                type: 'offline',\n                logo: getRandomLogo(),\n                id: Math.random() * 1000\n              }\n            \n            this.setState(prevState => ({\n              streams: [...prevState.streams, streamObj],\n              isLoaded: prevState.streams.length + 1 === allStreams.length\n            }))\n          },\n          (error) => {\n            alert(error)\n          }\n        )\n  }\n  handleButtonRemove(stream) {\n    allStreams = allStreams.filter(item => item !== stream)\n    this.setState(prevState => ({\n      streams: prevState.streams.filter(item => item.name !== stream)\n    }))\n  }\n  handleAddButton(user) {\n    if (allStreams.some(item => item === user)) {\n      alert('This stream aldeady exists!')\n      return\n    }\n\n    fetch(`https://api.twitch.tv/kraken/users/${user}`, {\n      method: 'GET',\n      mode: 'cors',\n      headers: {\n        'Client-ID': 'rrpmmx09b1azju8jpwk6ugeei3uml9'\n      }\n    })\n      .then(res => res.json())\n        .then(\n          (result) => {\n            if (result.hasOwnProperty('error')) {\n              alert('Twitch.tv doesnt stream this!')\n              return\n            }\n\n            allStreams.push(user)\n            \n            this.makeRequest(user)\n          },\n          (error) => {\n            alert(error)\n          }\n        )\n  }\n  render() {\n    const btnActivePosition = {left: this.state.show === 'all' \n                                ? '3.5%' \n                                : this.state.show === 'online' \n                                  ? '36.5%' \n                                  : '69.5%'}\n    const streamsContent = this.state.isLoaded \n                            ? <Streams streams={this.state.streams} \n                                       show={this.state.show}\n                                       onClick={this.handleButtonRemove}/> \n                            : <div className='loading'></div>\n    return(\n      <div className='container'>  \n        <Header onSubmit={this.handleAddButton}/>\n        <main>\n          <div className='btns-container' >\n            <div className='btn-active' style={btnActivePosition}></div>\n            <Button text='All' \n                    active={this.state.show}\n                    onClick={this.handleAllButton}/>\n            <Button text='Online'\n                    active={this.state.show}\n                    onClick={this.handleOnlineButton}/>\n            <Button text='Offline'\n                    active={this.state.show}\n                    onClick={this.handleOfflineButton}/>\n          </div>\n          {streamsContent} \n        </main>\n      </div>\n    )\n  }\n}\n\nlet allStreams = [\"ESL_SC2\", \"OgamingSC2\", \"cretetion\", \"freecodecamp\"]\n\nconst userDefaultIcons = ['https://static-cdn.jtvnw.net/user-default-pictures/cd618d3e-f14d-4960-b7cf-094231b04735-profile_image-300x300.jpg', 'https://static-cdn.jtvnw.net/user-default-pictures/cd618d3e-f14d-4960-b7cf-094231b04735-profile_image-300x300.jpg', 'https://static-cdn.jtvnw.net/user-default-pictures/49988c7b-57bc-4dee-bd4f-6df4ad215d3a-profile_image-300x300.jpg', 'https://static-cdn.jtvnw.net/user-default-pictures/bb97f7e6-f11a-4194-9708-52bf5a5125e8-profile_image-300x300.jpg', 'https://static-cdn.jtvnw.net/user-default-pictures/4cbf10f1-bb9f-4f57-90e1-15bf06cfe6f5-profile_image-300x300.jpg', 'https://static-cdn.jtvnw.net/user-default-pictures/27103734-3cda-44d6-a384-f2ab71e4bb85-profile_image-300x300.jpg']\n\nconst getRandomLogo = () => {\n  return userDefaultIcons[Math.floor(Math.random() * (userDefaultIcons.length))]\n}\n\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}